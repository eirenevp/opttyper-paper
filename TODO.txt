0. Discuss about optimizing 5 and 6:
   Rebuttal answer:
	 Unfortunately, although the objective function in (5) is convex, the
	 constraints are nonlinear and nonconvex, so standard off-the-shelf
	 numerical optimization solvers are unlikely to be effective.  The method
	 that we employ is a type of penalty method for nonlinear constraint
	 optimization, which is a standard approach to such problems (see
	 Bertsekas, Nonlinear Programming, Chapter 5).

	 Charles's response:
	 Yes absolutely but there are two issues we should talk about

A) suppose that we are able to find the global constrained minimum of the objective function. Are the logical constraints then satisfied? This should be a theorem that we can prove

B) then explain that in practice we will not be able to find the exact constrained minimum so explain what we can do instead (that’s the text from your email)

1. What's the use of probabilistic type inference?

2. Add somewhere why the structure subproblem is not trivial and probably specify again that we don't address this problem, from the rebuttal:

 The \textit{Structure} subproblem is not a simple syntactic process as a JavaScript module can export functions by arbitrary execution of code. To obtain full accuracy we would need to execute the code rather than simply parse it.

2. Change "readable" types

3. More careful discussion for optional / gradual typing

4. Better discussion - future work


5. in the conclusion we still don't say 70% is compared to ?







Other comments:

miltos:Arguably this https://ml4code.github.io/publications/chibotaru2019scalable/ can claim to be doing this, but much more loosely compared to you. (but since you might get the authors of the paper to be your reviewers it might be worth mentioning them)
	https://pdfs.semanticscholar.org/cfd1/b5c47aee34173033d7fcc4dda03ab4889e98.pdf (<- I have not yet read this paper, but the last time I skimmed this, it reminded me your method of converting logical constraints to arithmetic formulas. Some of the authors could be reviewers…)
	https://dl.acm.org/citation.cfm?id=2950343 (<- probably worth mentioning)
	https://ml4code.github.io/publications/dash2018refinym/ (<- arguably, we take into account [some] logical constraints)  
